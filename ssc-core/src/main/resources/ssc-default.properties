# provider for the account that SSC is running under, must be able to write to S3 bucket.
ssc.provider.class.name=com.amazonaws.auth.ClasspathPropertiesFileCredentialsProvider

# s3 storage information.
ssc.s3.bucket.name=eqt.state.capture.bucket
# id of the region to bind to
ssc.s3.bucket.region=us-east-1


# Set if you are using ZookeeperMultiAccountManager Distributed Management
ssc.dist.zookeeper.connect.string=localhost:2181

## account management info

# APICollectors to run
ssc.process.api.collectors=com.eqt.ssc.collector.EC2Collector,com.eqt.ssc.collector.S3Collector,com.eqt.ssc.collector.ELBCollector,com.eqt.ssc.collector.S3LogCollector

# Collector specific parameters

# max objects to pull per call to s3.listObjects
ssc.collector.s3logcollector.maxCache=100
# max files to pull per check, larger files can take longer, too small and it could get behind
ssc.collector.s3logcollector.maxBatch=500

# class to load for calling to retrieve accounts (AwsCreds) from.
ssc.account.manager.class.name=com.eqt.ssc.accounts.SameCredAccountManager
#ssc.account.manager.class.name=com.eqt.ssc.accounts.ZookeeperMultiAccountManager

# this lets you wrap the SSCFixedProvider in another one, for example an STSProvider. Provider must take
# single constructor arg of another provider.
#ssc.account.manager.provider=

# how often to hit AWS api's for state change
ssc.account.check.interval.default.seconds=300
ssc.account.check.interval.ec2.seconds=277
ssc.account.check.interval.s3log.seconds=300

#port to start web server on
ssc.web.port=8182
#enable ssl on web interface
ssc.web.ssl=false
#keystore bits
ssc.web.keystore=/noKeystore.jks
ssc.web.keystore.password=123456
ssc.web.keymanager.password=123456

